// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/ToDo.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SimpleGrpcService {
  public static partial class ToDoVerwaltung
  {
    static readonly string __ServiceName = "ToDo.ToDoVerwaltung";

    static readonly grpc::Marshaller<global::SimpleGrpcService.Empty> __Marshaller_ToDo_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SimpleGrpcService.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SimpleGrpcService.Todos> __Marshaller_ToDo_Todos = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SimpleGrpcService.Todos.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SimpleGrpcService.ToDoItem> __Marshaller_ToDo_ToDoItem = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SimpleGrpcService.ToDoItem.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SimpleGrpcService.ToDoId> __Marshaller_ToDo_ToDoId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SimpleGrpcService.ToDoId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SimpleGrpcService.Ergebnis> __Marshaller_ToDo_Ergebnis = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SimpleGrpcService.Ergebnis.Parser.ParseFrom);

    static readonly grpc::Method<global::SimpleGrpcService.Empty, global::SimpleGrpcService.Todos> __Method_GetToDos = new grpc::Method<global::SimpleGrpcService.Empty, global::SimpleGrpcService.Todos>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetToDos",
        __Marshaller_ToDo_Empty,
        __Marshaller_ToDo_Todos);

    static readonly grpc::Method<global::SimpleGrpcService.Empty, global::SimpleGrpcService.ToDoItem> __Method_GetToDosStream = new grpc::Method<global::SimpleGrpcService.Empty, global::SimpleGrpcService.ToDoItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetToDosStream",
        __Marshaller_ToDo_Empty,
        __Marshaller_ToDo_ToDoItem);

    static readonly grpc::Method<global::SimpleGrpcService.ToDoId, global::SimpleGrpcService.ToDoItem> __Method_GetToDo = new grpc::Method<global::SimpleGrpcService.ToDoId, global::SimpleGrpcService.ToDoItem>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetToDo",
        __Marshaller_ToDo_ToDoId,
        __Marshaller_ToDo_ToDoItem);

    static readonly grpc::Method<global::SimpleGrpcService.ToDoItem, global::SimpleGrpcService.Ergebnis> __Method_DeleteToDo = new grpc::Method<global::SimpleGrpcService.ToDoItem, global::SimpleGrpcService.Ergebnis>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteToDo",
        __Marshaller_ToDo_ToDoItem,
        __Marshaller_ToDo_Ergebnis);

    static readonly grpc::Method<global::SimpleGrpcService.ToDoId, global::SimpleGrpcService.Ergebnis> __Method_CheckToDoItem = new grpc::Method<global::SimpleGrpcService.ToDoId, global::SimpleGrpcService.Ergebnis>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckToDoItem",
        __Marshaller_ToDo_ToDoId,
        __Marshaller_ToDo_Ergebnis);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SimpleGrpcService.ToDoReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ToDoVerwaltung</summary>
    public partial class ToDoVerwaltungClient : grpc::ClientBase<ToDoVerwaltungClient>
    {
      /// <summary>Creates a new client for ToDoVerwaltung</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ToDoVerwaltungClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ToDoVerwaltung that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ToDoVerwaltungClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ToDoVerwaltungClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ToDoVerwaltungClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SimpleGrpcService.Todos GetToDos(global::SimpleGrpcService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToDos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SimpleGrpcService.Todos GetToDos(global::SimpleGrpcService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetToDos, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SimpleGrpcService.Todos> GetToDosAsync(global::SimpleGrpcService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToDosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SimpleGrpcService.Todos> GetToDosAsync(global::SimpleGrpcService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetToDos, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::SimpleGrpcService.ToDoItem> GetToDosStream(global::SimpleGrpcService.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToDosStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::SimpleGrpcService.ToDoItem> GetToDosStream(global::SimpleGrpcService.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetToDosStream, null, options, request);
      }
      public virtual global::SimpleGrpcService.ToDoItem GetToDo(global::SimpleGrpcService.ToDoId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToDo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SimpleGrpcService.ToDoItem GetToDo(global::SimpleGrpcService.ToDoId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetToDo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SimpleGrpcService.ToDoItem> GetToDoAsync(global::SimpleGrpcService.ToDoId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetToDoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SimpleGrpcService.ToDoItem> GetToDoAsync(global::SimpleGrpcService.ToDoId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetToDo, null, options, request);
      }
      public virtual global::SimpleGrpcService.Ergebnis DeleteToDo(global::SimpleGrpcService.ToDoItem request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteToDo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SimpleGrpcService.Ergebnis DeleteToDo(global::SimpleGrpcService.ToDoItem request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteToDo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SimpleGrpcService.Ergebnis> DeleteToDoAsync(global::SimpleGrpcService.ToDoItem request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteToDoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SimpleGrpcService.Ergebnis> DeleteToDoAsync(global::SimpleGrpcService.ToDoItem request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteToDo, null, options, request);
      }
      public virtual global::SimpleGrpcService.Ergebnis CheckToDoItem(global::SimpleGrpcService.ToDoId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckToDoItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SimpleGrpcService.Ergebnis CheckToDoItem(global::SimpleGrpcService.ToDoId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckToDoItem, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SimpleGrpcService.Ergebnis> CheckToDoItemAsync(global::SimpleGrpcService.ToDoId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckToDoItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SimpleGrpcService.Ergebnis> CheckToDoItemAsync(global::SimpleGrpcService.ToDoId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckToDoItem, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ToDoVerwaltungClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ToDoVerwaltungClient(configuration);
      }
    }

  }
}
#endregion
